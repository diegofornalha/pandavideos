import streamlit as st
import os
import pandas as pd
import io
import time
from panda_downloader import (
    verificar_autenticacao, 
    listar_pastas,
    listar_videos_pasta, 
    baixar_video, 
    baixar_todos_videos,
    baixar_video_oficial,
    identificar_subpastas,
    headers,
    BASE_URL,
    API_KEY,
    formatar_tamanho
)
from dotenv import load_dotenv
import requests

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="Panda Video Downloader",
    page_icon="üêº",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilo personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #FF4B4B;
        text-align: center;
    }
    .sub-header {
        font-size: 1.5rem;
        margin-top: 0;
        margin-bottom: 1rem;
        text-align: center;
    }
    .success-message {
        color: #00CC66;
        font-weight: bold;
    }
    .error-message {
        color: #FF4B4B;
        font-weight: bold;
    }
    .info-box {
        background-color: #F0F2F6;
        padding: 1rem;
        border-radius: 5px;
    }
</style>
""", unsafe_allow_html=True)

# Fun√ß√µes auxiliares adaptadas para Streamlit
def verificar_autenticacao_st():
    """Verificar autentica√ß√£o com feedback no Streamlit"""
    with st.spinner("Verificando autentica√ß√£o com a API do Panda Videos..."):
        if API_KEY is None:
            st.error("üîë API KEY n√£o est√° definida! Configure o arquivo .env com sua PANDA_API_KEY")
            return False
        
        endpoint = f'{BASE_URL}/videos'
        try:
            response = requests.get(endpoint, headers=headers)
            if response.status_code == 200:
                st.success("‚úÖ Autentica√ß√£o realizada com sucesso!")
                return True
            else:
                st.error(f"‚ùå Falha na autentica√ß√£o. Status: {response.status_code}")
                st.error(f"Resposta: {response.text}")
                return False
        except Exception as e:
            st.error(f"‚ùå Erro na autentica√ß√£o: {e}")
            return False

def baixar_video_st(video_id, pasta_destino="downloads", status_container=None):
    """Vers√£o adaptada para Streamlit do download de v√≠deo"""
    if status_container is None:
        status_container = st.empty()
    
    # Obter informa√ß√µes do v√≠deo
    endpoint = f'{BASE_URL}/videos/{video_id}'
    try:
        response = requests.get(endpoint, headers=headers)
        if response.status_code != 200:
            status_container.error(f"‚ùå Erro ao obter informa√ß√µes do v√≠deo: {response.status_code}")
            return False
        
        video_info = response.json()
        titulo = video_info.get('title', f'video_{video_id}')
        
        # Criar diret√≥rio se n√£o existir
        if not os.path.exists(pasta_destino):
            os.makedirs(pasta_destino)
            status_container.info(f"üìÅ Pasta criada: {pasta_destino}")
        
        # Tentar baixar o v√≠deo
        status_container.info(f"üîÑ Iniciando download do v√≠deo: {titulo}")
        resultado = baixar_video(video_id, pasta_destino)
        
        if resultado:
            nome_arquivo = f"{titulo.replace(' ', '_')}.mp4"
            caminho_completo = os.path.join(pasta_destino, nome_arquivo)
            if os.path.exists(caminho_completo):
                tamanho = os.path.getsize(caminho_completo)
                status_container.success(f"‚úÖ Download conclu√≠do: {nome_arquivo} ({formatar_tamanho(tamanho)})")
            else:
                status_container.success(f"‚úÖ Download conclu√≠do, mas n√£o foi poss√≠vel encontrar o arquivo localmente.")
            return True
        else:
            status_container.error(f"‚ùå Falha no download do v√≠deo {titulo}")
            return False
            
    except Exception as e:
        status_container.error(f"‚ùå Erro: {e}")
        return False

def baixar_todos_videos_st(videos, pasta_destino="downloads"):
    """Vers√£o adaptada para Streamlit do download de m√∫ltiplos v√≠deos"""
    if not videos:
        st.warning("‚ö†Ô∏è Nenhum v√≠deo dispon√≠vel para download.")
        return
    
    # Criar diret√≥rio se n√£o existir
    if not os.path.exists(pasta_destino):
        os.makedirs(pasta_destino)
        st.info(f"üìÅ Pasta criada: {pasta_destino}")
    
    # Verificar v√≠deos j√° baixados
    st.info(f"üîç Verificando {len(videos)} v√≠deos...")
    videos_para_baixar = []
    for video in videos:
        titulo = video.get('title', f"video_{video['id']}")
        nome_arquivo = f"{titulo.replace(' ', '_')}.mp4"
        caminho_completo = os.path.join(pasta_destino, nome_arquivo)
        
        if os.path.exists(caminho_completo):
            tamanho = os.path.getsize(caminho_completo)
            st.info(f"‚ö†Ô∏è V√≠deo '{titulo}' j√° existe ({formatar_tamanho(tamanho)})")
        else:
            videos_para_baixar.append(video)
    
    if not videos_para_baixar:
        st.success("‚úÖ Todos os v√≠deos j√° foram baixados anteriormente!")
        return
    
    # Baixar v√≠deos pendentes
    st.info(f"üîÑ Iniciando download de {len(videos_para_baixar)} v√≠deos pendentes...")
    
    # Barra de progresso geral
    progresso_geral = st.progress(0)
    status_atual = st.empty()
    
    sucessos = 0
    falhas = 0
    videos_com_falha = []
    
    for i, video in enumerate(videos_para_baixar):
        titulo = video.get('title', 'Sem t√≠tulo')
        status_atual.info(f"üîÑ Baixando v√≠deo {i+1} de {len(videos_para_baixar)}: {titulo}")
        
        # Container para status deste v√≠deo espec√≠fico
        status_container = st.empty()
        
        if baixar_video_st(video['id'], pasta_destino, status_container):
            sucessos += 1
        else:
            falhas += 1
            videos_com_falha.append(video)
        
        # Atualizar barra de progresso
        progresso_geral.progress((i + 1) / len(videos_para_baixar))
    
    # Resultado final
    st.markdown("## Resultado Final")
    st.success(f"‚úÖ Downloads conclu√≠dos: {sucessos}")
    
    if falhas > 0:
        st.error(f"‚ùå Downloads com falha: {falhas}")
        for video in videos_com_falha:
            st.error(f"  - {video.get('title', 'Sem t√≠tulo')} (ID: {video['id']})")
    
    # Exibir arquivos na pasta
    arquivos = os.listdir(pasta_destino)
    if arquivos:
        st.markdown(f"## üìÅ Arquivos na pasta {pasta_destino}")
        
        dados_arquivos = []
        tamanho_total = 0
        
        for arquivo in arquivos:
            if arquivo.endswith('.mp4'):
                caminho_arquivo = os.path.join(pasta_destino, arquivo)
                tamanho = os.path.getsize(caminho_arquivo)
                tamanho_total += tamanho
                dados_arquivos.append({
                    "Arquivo": arquivo,
                    "Tamanho": formatar_tamanho(tamanho)
                })
        
        # Exibir tabela de arquivos
        if dados_arquivos:
            st.table(pd.DataFrame(dados_arquivos))
            st.info(f"Tamanho total: {formatar_tamanho(tamanho_total)}")
        else:
            st.info("Nenhum arquivo MP4 encontrado na pasta de downloads.")

# P√°ginas da aplica√ß√£o
def pagina_inicio():
    st.markdown('<h1 class="main-header">üêº Panda Video Downloader</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">Baixe v√≠deos da plataforma Panda Videos</p>', unsafe_allow_html=True)
    
    # Verificar autentica√ß√£o
    if not verificar_autenticacao_st():
        st.stop()
    
    st.markdown("## üìÅ Op√ß√µes Dispon√≠veis")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.info("üîç Listar Pastas")
        st.button("Ver Pastas", on_click=lambda: st.session_state.update({"pagina": "listar_pastas"}))
    
    with col2:
        st.info("üì• Baixar Video por ID")
        st.button("Baixar Video", on_click=lambda: st.session_state.update({"pagina": "baixar_video"}))
    
    with col3:
        st.info("üóÇÔ∏è Gerenciar Subpastas")
        st.button("Gerenciar M√≥dulos", on_click=lambda: st.session_state.update({"pagina": "subpastas"}))
    
    # Informa√ß√µes adicionais
    st.markdown("## üìã Sobre o Aplicativo")
    
    with st.expander("Como usar"):
        st.markdown("""
        ### Instru√ß√µes de Uso
        
        1. **Ver Pastas**: Lista todas as pastas dispon√≠veis na sua conta e permite baixar v√≠deos de uma pasta espec√≠fica.
        2. **Baixar Video**: Permite baixar um v√≠deo espec√≠fico atrav√©s do seu ID.
        3. **Gerenciar M√≥dulos**: Identifica subpastas/m√≥dulos de um curso e permite baixar todos os v√≠deos de um curso completo.
        
        ### Pr√©-requisitos
        
        - Uma chave de API v√°lida do Panda Videos configurada no arquivo `.env`
        - Conex√£o com a internet
        - Espa√ßo em disco suficiente para os downloads
        """)

def pagina_listar_pastas():
    st.markdown("# üìÅ Pastas Dispon√≠veis")
    st.button("‚Üê Voltar", on_click=lambda: st.session_state.update({"pagina": "inicio"}))
    
    # Listar pastas
    with st.spinner("Carregando pastas..."):
        pastas = listar_pastas(exibir=False)
    
    if not pastas:
        st.warning("Nenhuma pasta encontrada na conta.")
        return
    
    # Exibir pastas como tabela
    dados_pastas = []
    for i, pasta in enumerate(pastas, 1):
        dados_pastas.append({
            "N√∫mero": i,
            "Nome": pasta.get('name', 'Sem nome'),
            "ID": pasta.get('id', 'Sem ID')
        })
    
    # Criar dataframe e exibir
    df_pastas = pd.DataFrame(dados_pastas)
    st.dataframe(df_pastas)
    
    # Sele√ß√£o de pasta
    pasta_selecionada = st.selectbox(
        "Selecione uma pasta para visualizar v√≠deos:", 
        options=range(len(pastas)),
        format_func=lambda i: f"{pastas[i].get('name', 'Sem nome')} (ID: {pastas[i].get('id', 'Sem ID')})"
    )
    
    if st.button("Listar V√≠deos"):
        pasta_id = pastas[pasta_selecionada].get('id')
        pasta_nome = pastas[pasta_selecionada].get('name', 'Sem nome')
        
        st.session_state.pasta_atual = {
            "id": pasta_id,
            "nome": pasta_nome
        }
        
        st.session_state.pagina = "listar_videos"

def pagina_listar_videos():
    if "pasta_atual" not in st.session_state:
        st.error("Nenhuma pasta selecionada. Voltando para a lista de pastas.")
        st.button("Ir para Lista de Pastas", on_click=lambda: st.session_state.update({"pagina": "listar_pastas"}))
        return
    
    pasta_id = st.session_state.pasta_atual["id"]
    pasta_nome = st.session_state.pasta_atual["nome"]
    
    st.markdown(f"# üé¨ V√≠deos da Pasta: {pasta_nome}")
    st.button("‚Üê Voltar para Pastas", on_click=lambda: st.session_state.update({"pagina": "listar_pastas"}))
    
    # Listar v√≠deos
    with st.spinner(f"Carregando v√≠deos da pasta {pasta_nome}..."):
        videos = listar_videos_pasta(pasta_id, pasta_nome)
    
    if not videos:
        st.warning(f"Nenhum v√≠deo encontrado na pasta '{pasta_nome}'")
        return
    
    # Exibir v√≠deos como tabela
    dados_videos = []
    for i, video in enumerate(videos, 1):
        dados_videos.append({
            "N√∫mero": i,
            "T√≠tulo": video.get('title', 'Sem t√≠tulo'),
            "Dura√ß√£o": video.get('duration', 'N/A'),
            "ID": video.get('id', 'Sem ID')
        })
    
    # Criar dataframe e exibir
    df_videos = pd.DataFrame(dados_videos)
    st.dataframe(df_videos)
    
    # Op√ß√µes de download
    st.markdown("## Op√ß√µes de Download")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Baixar Um V√≠deo")
        video_selecionado = st.selectbox(
            "Selecione um v√≠deo para baixar:", 
            options=range(len(videos)),
            format_func=lambda i: f"{videos[i].get('title', 'Sem t√≠tulo')} (Dura√ß√£o: {videos[i].get('duration', 'N/A')})"
        )
        
        pasta_destino_individual = st.text_input("Pasta de destino (individual):", value="downloads")
        
        if st.button("Baixar V√≠deo Selecionado"):
            video_id = videos[video_selecionado].get('id')
            if video_id:
                baixar_video_st(video_id, pasta_destino_individual)
            else:
                st.error("ID do v√≠deo n√£o encontrado.")
    
    with col2:
        st.markdown("### Baixar Todos os V√≠deos")
        pasta_destino_todos = st.text_input(
            "Pasta de destino (todos):", 
            value=f"downloads/{pasta_nome.replace(' ', '_')}"
        )
        
        if st.button("Baixar Todos os V√≠deos"):
            baixar_todos_videos_st(videos, pasta_destino_todos)

def pagina_baixar_video():
    st.markdown("# üì• Baixar V√≠deo por ID")
    st.button("‚Üê Voltar", on_click=lambda: st.session_state.update({"pagina": "inicio"}))
    
    video_id = st.text_input("ID do V√≠deo:", placeholder="Insira o ID do v√≠deo aqui")
    pasta_destino = st.text_input("Pasta de destino:", value="downloads")
    
    if st.button("Baixar V√≠deo", disabled=not video_id):
        if not video_id.strip():
            st.error("Por favor, insira um ID de v√≠deo v√°lido.")
        else:
            baixar_video_st(video_id.strip(), pasta_destino)

def pagina_subpastas():
    st.markdown("# üóÇÔ∏è Subpastas / M√≥dulos")
    st.button("‚Üê Voltar", on_click=lambda: st.session_state.update({"pagina": "inicio"}))
    
    st.info("Esta funcionalidade permite identificar e baixar v√≠deos de m√≥dulos/subpastas de um curso completo.")
    
    # Listar pastas para sele√ß√£o
    with st.expander("Selecionar da lista de pastas"):
        with st.spinner("Carregando pastas..."):
            pastas = listar_pastas(exibir=False)
        
        if not pastas:
            st.warning("Nenhuma pasta encontrada na conta.")
        else:
            pasta_selecionada = st.selectbox(
                "Selecione a pasta principal/curso:", 
                options=range(len(pastas)),
                format_func=lambda i: f"{pastas[i].get('name', 'Sem nome')} (ID: {pastas[i].get('id', 'Sem ID')})"
            )
            
            if st.button("Usar Esta Pasta"):
                pasta_id = pastas[pasta_selecionada].get('id')
                st.session_state.pasta_id_subpastas = pasta_id
    
    # Inserir ID manualmente
    col1, col2 = st.columns(2)
    with col1:
        pasta_id_manual = st.text_input("Ou insira o ID da pasta principal/curso manualmente:")
        if st.button("Usar Este ID", disabled=not pasta_id_manual):
            st.session_state.pasta_id_subpastas = pasta_id_manual
    
    with col2:
        padrao_regex = st.text_input("Padr√£o de regex para filtrar subpastas (opcional):", 
                                   placeholder="Ex: M√≥dulo.*")
    
    # Se foi selecionada uma pasta, mostrar op√ß√µes para identificar subpastas
    if "pasta_id_subpastas" in st.session_state:
        pasta_id = st.session_state.pasta_id_subpastas
        
        st.markdown(f"## Identificando subpastas para ID: {pasta_id}")
        
        # Pasta de destino para downloads
        pasta_destino_base = st.text_input("Pasta base para downloads:", value="downloads/curso")
        
        if st.button("Identificar Subpastas"):
            with st.spinner("Identificando subpastas..."):
                subpastas = identificar_subpastas(pasta_id, padrao_regex)
            
            if not subpastas:
                st.warning("Nenhuma subpasta encontrada com o padr√£o especificado.")
            else:
                # Exibir subpastas encontradas
                st.success(f"Encontradas {len(subpastas)} subpastas/m√≥dulos!")
                
                dados_subpastas = []
                for i, subpasta in enumerate(subpastas, 1):
                    dados_subpastas.append({
                        "N√∫mero": i,
                        "Nome": subpasta['name'],
                        "ID": subpasta['id']
                    })
                
                st.dataframe(pd.DataFrame(dados_subpastas))
                
                # Op√ß√£o para baixar todos os v√≠deos das subpastas
                if st.button("Baixar V√≠deos de Todas as Subpastas"):
                    # Garantir que a pasta base existe
                    if not os.path.exists(pasta_destino_base):
                        os.makedirs(pasta_destino_base)
                        st.info(f"Pasta base criada: {pasta_destino_base}")
                    
                    st.info(f"Iniciando download de v√≠deos de todas as subpastas para: {pasta_destino_base}")
                    
                    # Barra de progresso para as subpastas
                    progresso_subpastas = st.progress(0)
                    
                    for i, subpasta in enumerate(subpastas):
                        subpasta_id = subpasta['id']
                        subpasta_nome = subpasta['name']
                        
                        # Criar pasta espec√≠fica para esta subpasta
                        pasta_destino = os.path.join(pasta_destino_base, subpasta_nome.replace(' ', '_'))
                        if not os.path.exists(pasta_destino):
                            os.makedirs(pasta_destino)
                        
                        st.markdown(f"### Processando subpasta: {subpasta_nome}")
                        videos = listar_videos_pasta(subpasta_id, subpasta_nome)
                        
                        if videos:
                            st.info(f"Baixando {len(videos)} v√≠deos da subpasta '{subpasta_nome}' para '{pasta_destino}'")
                            baixar_todos_videos_st(videos, pasta_destino)
                        else:
                            st.warning(f"Nenhum v√≠deo encontrado na subpasta '{subpasta_nome}'")
                        
                        # Atualizar progresso
                        progresso_subpastas.progress((i + 1) / len(subpastas))

# Principal
def main():
    # Inicializar estado da sess√£o
    if "pagina" not in st.session_state:
        st.session_state.pagina = "inicio"
    
    # Navega√ß√£o entre p√°ginas
    if st.session_state.pagina == "inicio":
        pagina_inicio()
    elif st.session_state.pagina == "listar_pastas":
        pagina_listar_pastas()
    elif st.session_state.pagina == "listar_videos":
        pagina_listar_videos()
    elif st.session_state.pagina == "baixar_video":
        pagina_baixar_video()
    elif st.session_state.pagina == "subpastas":
        pagina_subpastas()

if __name__ == "__main__":
    main()
